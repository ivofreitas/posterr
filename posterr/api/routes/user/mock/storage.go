// Code generated by MockGen. DO NOT EDIT.
// Source: api/routes/user/storage/storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mysql "strider-backend-test.com/adapter/mysql"
	model "strider-backend-test.com/api/routes/user/model"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockRepository) BeginTransaction(ctx context.Context) (mysql.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx)
	ret0, _ := ret[0].(mysql.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockRepositoryMockRecorder) BeginTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockRepository)(nil).BeginTransaction), ctx)
}

// Commit mocks base method.
func (m *MockRepository) Commit(ctx context.Context, tx mysql.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Commit", ctx, tx)
}

// Commit indicates an expected call of Commit.
func (mr *MockRepositoryMockRecorder) Commit(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRepository)(nil).Commit), ctx, tx)
}

// IncrementFollowerCount mocks base method.
func (m *MockRepository) IncrementFollowerCount(ctx context.Context, tx mysql.Transaction, request *model.UpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementFollowerCount", ctx, tx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementFollowerCount indicates an expected call of IncrementFollowerCount.
func (mr *MockRepositoryMockRecorder) IncrementFollowerCount(ctx, tx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFollowerCount", reflect.TypeOf((*MockRepository)(nil).IncrementFollowerCount), ctx, tx, request)
}

// IncrementFollowingCount mocks base method.
func (m *MockRepository) IncrementFollowingCount(ctx context.Context, tx mysql.Transaction, request *model.UpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementFollowingCount", ctx, tx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementFollowingCount indicates an expected call of IncrementFollowingCount.
func (mr *MockRepositoryMockRecorder) IncrementFollowingCount(ctx, tx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFollowingCount", reflect.TypeOf((*MockRepository)(nil).IncrementFollowingCount), ctx, tx, request)
}

// IncrementPostCount mocks base method.
func (m *MockRepository) IncrementPostCount(ctx context.Context, tx mysql.Transaction, request *model.UpdateRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementPostCount", ctx, tx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementPostCount indicates an expected call of IncrementPostCount.
func (mr *MockRepositoryMockRecorder) IncrementPostCount(ctx, tx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementPostCount", reflect.TypeOf((*MockRepository)(nil).IncrementPostCount), ctx, tx, request)
}

// QueryContext mocks base method.
func (m *MockRepository) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockRepositoryMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockRepository)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockRepository) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockRepositoryMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockRepository)(nil).QueryRowContext), varargs...)
}

// Rollback mocks base method.
func (m *MockRepository) Rollback(ctx context.Context, tx mysql.Transaction) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Rollback", ctx, tx)
}

// Rollback indicates an expected call of Rollback.
func (mr *MockRepositoryMockRecorder) Rollback(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockRepository)(nil).Rollback), ctx, tx)
}
